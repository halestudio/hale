<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<!-- ignore if not present to allow using internal default -->
		<property name="ignoreUnresolvablePlaceholders" value="true" />
	</bean>

	<!-- project scavenger -->
	<bean id="scavenger"
		class="eu.esdihumboldt.hale.server.projects.impl.ProjectScavengerImpl">
		<constructor-arg ref="environments" />
		<constructor-arg value="${hale.projectsloc}" />
		
		<!-- add security interceptor -->
		<!-- sec:intercept-methods
			access-decision-manager-ref="methodAccessDecisionManager">

			<sec:protect method="*" access="ROLE_ADMIN" />
			sec:protect method="transaction" access="ROLE_ADMIN,INVOKE_OBJECTSERVICE" />
		</sec:intercept-methods-->
	</bean>

	<!-- transformation environment manager -->
	<bean id="environments"
		class="eu.esdihumboldt.hale.common.headless.impl.EnvironmentManagerImpl">
	</bean>

	<!-- projects commands -->
	<bean id="projectCommands"
		class="eu.esdihumboldt.hale.server.projects.internal.ProjectCommands">
		<property name="projects" ref="scavenger" />
	</bean>
	
	<!-- workspace service -->
	<bean id="workspaces"
		class="eu.esdihumboldt.hale.common.headless.impl.WorkspaceServiceImpl">
		<constructor-arg value="${hale.workspacesloc}" />
	</bean>
	
	<!-- Jobs -->
    <bean id="workspacesJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="workspaces"/>
		<property name="targetMethod" value="trigger"/>
		<property name="concurrent" value="false"/>
	</bean>
	
	<!-- Triggers -->
	<bean id="workspacesTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
	    <property name="jobDetail" ref="workspacesJob" />
	    <!-- 30 seconds -->
	    <property name="startDelay" value="30000" />
	    <!-- repeat every 600 seconds -->
	    <property name="repeatInterval" value="600000" />
	</bean>
	
	<!-- bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
	    <property name="jobDetail" ref="jobDetail" />
		<!- run every morning at 3 AM ->
	    <property name="cronExpression" value="0 0 3 * * ?" />
	</bean -->
	
	<!-- Scheduler -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
	    <property name="triggers">
	        <list>
	            <!-- ref bean="cronTrigger" /-->
	            <ref bean="workspacesTrigger" />
	        </list>
	    </property>
	</bean>

	<!-- role voter -->
	<!-- bean id="roleVoter" class="org.springframework.security.access.vote.RoleVoter" /-->

	<!-- voter for ObjectService invocations -->
	<!-- bean id="objectServiceVoter"
		class="de.fhg.igd.objects.security.user.voter.ObjectServiceInvocationVoter" /-->

	<!-- access decision manager -->
	<!-- SHOULD BE THE SAME FOR ALL CONTEXTS -->
	<!-- bean id="methodAccessDecisionManager"
		class="org.springframework.security.access.vote.AffirmativeBased">
		<property name="allowIfAllAbstainDecisions">
			<value>false</value>
		</property>
		<property name="decisionVoters">
			<list>
				<ref local="roleVoter" />
				<ref local="objectServiceVoter" />
			</list>
		</property>
	</bean-->

	<!-- users -->
	<!-- SHOULD BE THE SAME FOR ALL CONTEXTS -->
	<!-- sec:authentication-manager>
		<sec:authentication-provider
			user-service-ref="userDetailsService" />
	</sec:authentication-manager-->

</beans>
