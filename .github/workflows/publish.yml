name: Publish

on:
  push:
    branches:
      - master
  workflow_dispatch: {}

concurrency:
  # only run one publishing at a time to avoid conflicts
  group: publish-${{ github.ref }}

# env:
  # instead of embedded Maven use local Maven CLI
  # HALE_BUILD_MAVEN_EMBEDDED: 'false'

jobs:
  build:
    # Only on main repository (don't publish on forks)
    if: github.repository_owner == 'halestudio'

    runs-on: ubuntu-latest
    
    steps:
      - name: Setup Maven
        uses: s4u/setup-maven-action@4f7fb9d9675e899ca81c6161dadbba0189a4ebb1 # v1.18.0
        # uses: stempler/setup-maven-action@feat/cache-save-always
        with:
          java-version: 17
          java-distribution: temurin
          maven-version: 3.9.6
          # Note: currently not working because of https://github.com/actions/cache/issues/1315
          # Fix in https://github.com/actions/cache/pull/1325 not merged yet
          # cache-save-always: true

      - name: Install genisoimage # required for Mac build
        run: sudo apt-get install -y genisoimage

      - name: Login to Docker Hub
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Clean
        run: ./build.sh clean
        working-directory: ./build

      - name: Create hale-docker.conf file
        run: |
          mkdir -p ~/.hale
          cat <<EOF > ~/.hale/hale-docker.conf
          global {
            dockerHost="unix:///var/run/docker.sock"
          }
          EOF

      - name: Test
        run: ./build.sh commitStage # integrationStage no longer working due to outdated Docker client, tests are performed in hale-core
        working-directory: ./build

      - name: Product
        run: |
          ./build.sh product --arch x86_64 --os linux HALE
          ./build.sh product --arch x86_64 --os windows HALE
          ./build.sh product --arch x86_64 --os macosx HALE
          ./build.sh product --arch x86_64 --os linux --publish Infocenter
        working-directory: ./build

      - name: Upload hale studio build (Linux)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: hale studio (Linux)
          path: |
            build/target/hale-studio-*linux*.tar.gz
            !build/target/hale-studio-Infocenter*
          retention-days: 90

      - name: Upload hale studio build (Windows)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: hale studio (Windows)
          path: build/target/hale-studio-*win32*.zip
          retention-days: 90

      - name: Upload hale studio build (macos)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: hale studio (macos)
          path: |
            build/target/hale-studio-*macosx*.dmg
            build/target/hale-studio-*macosx*.tar.gz
          retention-days: 90

      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@f5b46b7f32cf5e7ebd652656c5036bf83dd1e60c # 1.0.8
        with:
          version: 2

      - name: Update site
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.BUILD_ARCHIVE_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.BUILD_ARCHIVE_SECRET_KEY }}
        run: ./upload-site.sh
        working-directory: ./build    

      # - name: Deploy Artifacts
      #   env:
      #     WETF_ARTIFACTORY_USER: ${{ secrets.WETF_ARTIFACTORY_USER }}
      #     WETF_ARTIFACTORY_PASSWORD: ${{ secrets.WETF_ARTIFACTORY_PASSWORD }}
      #     JAVA_TOOL_OPTIONS: '-Dmaven.wagon.httpconnectionManager.ttlSeconds=120'
      #   run: ./build.sh deployArtifacts
      #   working-directory: ./build   

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@3585e9575db828022551b4231f165eb59a0e74e3 # v5.6.2
        if: always() # always run even if the previous step fails
        with:
          # fail if there are no test results
          require_tests: true

          # Workaround for check that is additionally created being associated
          # to the wrong workflow/run. Instead no additional check is created.
          # See https://github.com/mikepenz/action-junit-report/issues/40
          annotate_only: true
          detailed_summary: true  
          report_paths: 'build/target/testReports/*.xml'

        # https://github.com/marketplace/actions/slack-notify-build
      - name: Notify failure to Slack
        if: failure()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@3665186a8c1a022b28a1dbe0954e73aa9081ea9e # v1.6.0
        with:
          channel: build-failures
          status: FAILED
          color: danger

  trivy:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Download hale studio build (Linux)
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: hale studio (Linux)

      - name: Extract the archive file
        run: |
          mkdir -p hale-studio-linux-trivy
          tar -xzf hale-studio-*linux*.tar.gz -C hale-studio-linux-trivy

      - name: Run Trivy vulnerability scanner in rootfs mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'rootfs'
          scan-ref: 'hale-studio-linux-trivy'
          format: 'sarif'
          severity: 'CRITICAL,HIGH'
          output: 'trivy-results.sarif'

      - name: Upload Trivy SARIF report
        uses: github/codeql-action/upload-sarif@d3678e237b9c32a6c9bffb3315c335f976f3549f # v3.30.2
        with:
          sarif_file: trivy-results.sarif
