<?xml version="1.0" encoding="UTF-8"?>

<!--+~~~~~~~~~~~~~+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+
	|  |  |_|_|_|_|   Fraunhofer-Institut für Graphische Datenverarbeitung   |
	|__|__|_|_|_|_|     (Fraunhofer Institute for Computer Graphics)         |
	|  |  |_|_|_|_|                                                          |
	|__|__|_|_|_|_|                                                          |
	|  __ |    ___|                                                          |
	| /_  /_  / _ |     Fraunhoferstrasse 5                                  |
	|/   / / /__/ |     D-64283 Darmstadt, Germany                           |
	+~~~~~~~~~~~~~+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+-->

<!--+ 
	| Buildfile with common targets for the headless build
	|
	| Usage:
	|   ant -f build.xml -Declipse=<eclipse root> -Dproduct=<product file>
	|       -DbuildId=<build id> -DtopLevelElementId=<top level id>
	|       -Dos=<operating system> -Dws=<window system> -Darch=<architecture>
	|		-Dcomponents=<components> -Dplatform.dir=<platform dir>
	|		-DlauncherName=<launcher name>
	|       [-Dtag=<tag>] [-DadditionalProperties=<additional>]
	|		[-Dbuild=<build directory>] [-Dinclude.jre=<include jre>]
	|		[-Djre=<path to jre>] [-Dlaunch.properties=<launch properties>]
	|
	|  <eclipse root>    - absolute path where Eclipse with Delta Pack is
	|                      installed (e.g. C:\eclipse)
	|  <product file>    - name of the product definition file to export
	|                      (e.g. ../plugins/AdminTool/CityServer3D.AdminTool.product)
	|  <build id>        - build identifier (e.g. "AdminTool"). This will be included in
	|                      the output filename.
	|  <top level id>    - the identifier of your top level plugin (usually the one
	|                      which contains the product definition file).
	|  <os>              - the target operating system of the product to build (e.g. "win32" or "linux")
	|  <ws>              - the target window system (e.g. "win32" or "gtk")
	|  <arch>            - the architecture of the product to build (e.g. "x86" or "x86_64")
	|  <tag>             - String used to tag the result file (optional)
	|  <additional>      - a filename of a properties file which defines additional
	|                      properties or the ones that are static and you don't want
	|                      to set in the command line (optional)
	|  <build directory> - absolute path where the build files
	|                      should be copied to (e.g. C:\temp\build) (optional)
	|  <components>      - components separated by |, component format: <name>;<from>;<to>;<excludes>,
	|                      where <to> is relative to the build directory
	|  <platform dir>    - directory where the target platform resides
	|  <launcher name>   - name of the launcher, must match the definition in the product
	|  <include jre>     - whether a JRE shall be included ("true" or "false" (default))
	|  <path to jre>     - path to the JRE to include if include.jre is set to "true",
	|                      if this is not set the java.home environment variable will be used
	|  <launch properties>
	|					 - additional required system properties that should be set on launch,
	|					   separated by commas (,). Only applies for package-server target.
	|					   (optional)
	|
	| Client specific properties
	|  - win32 (Windows XML Installer Kit)
	|    * wix				- absolute path where the Windows XML Installer Kit is installed
	|    * language			- the installer language ("de" or "en")
	|    * title			- the application name
	|    * wxs.dir			- directory where the .wxs files and any resources (in subdirectories) reside
	|    * wxs.file.config	- name of the .wxs configuration (without extension)
	|    * wxs.file.ui		- name of the .wxs ui configuration (without extension)
	|
	| Server specific properties
	|  - win32 (Windows Service using JSL)
	|    * serviceExeName	- name of the service executable (without extension),
	|						  must be different from <launcher name>
	|    * serviceName		- name of the service
	|
	| Targets:
	|  build				- build everything and run unit tests
	|  package-server		- build and package as server
	|  server-no-unit-tests - build and package as server without running unit tests
	|  package-client		- build and package as client application
	|  client-no-unit-tests - build and package as client without running unit tests
	|
	| Author: Michel Krämer, Simon Templer
	| Last changed: $Id: common.xml 928 2009-11-30 11:12:07Z stempler $
	+-->

<project name="Common Build">
	<!-- ant file location -->
	<dirname property="common.loc" file="${ant.file.Common Build}"/>

	<!-- load ant contributions -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${common.loc}/lib/ant-contrib.jar" />
		</classpath>
	</taskdef>

	<!-- set default deployment specific wxs file -->
	<property name="deploymentSpecificWxs" value="" />

	<!-- set build path -->
	<property name="build" location="../build" />

	<!-- get the JRE to copy -->
	<condition property="jre.tocopy" value="${jre}">
		<isset property="jre" />
	</condition>
	<condition property="jre.tocopy" value="${java.home}">
		<isset property="java.home" />
	</condition>

	<!-- is there an additional property file -->
	<condition property="additional.name" value="${additional}">
		<isset property="additional" />
	</condition>
	<property name="additional.name" value="${common.loc}/build.properties" />

	<!-- format regexes -->
	<property name="component.format" value="([^;]*);([^;]*);([^;]*);([^;]*)" />

	<!-- add hyphen to tag -->
	<condition property="tag.hyphen" value="${tag}-">
		<and>
			<isset property="tag" />
			<not>
				<equals arg1="${tag}" arg2="" trim="true" />
			</not>
		</and>
	</condition>
	<property name="tag.hyphen" value="" />

	<!-- convert relative paths to absolute paths -->
	<path id="absoluteBuild" path="${build}" />
	<path id="absoluteCommon" path="${common.loc}" />

	<property name="release" value="${build}/release" />

	<!-- include property files -->
	<property file="${additional.name}" />
	<property file="${common.loc}/build.properties" />
	
	<propertyset id="proxy-props">
	  <propertyref prefix="java.net.useSystemProxies"/>
	  <propertyref prefix="http."/>
	  <propertyref prefix="https."/>
	  <propertyref prefix="ftp."/>
	  <propertyref prefix="socksProxy"/>
	</propertyset>

	<!-- Delete the build directory -->
	<target name="clean" description="Delete the build directory">
		<delete dir="${toString:absoluteBuild}" />
	</target>

	<!-- Copy components and target platform to build directory -->
	<target name="prepare" description="Copy all components and the target platform to the build directory">
		<!-- copy plugins from target platform -->
		<if>
			<isset property="platform.dir" />
			<then>
				<echo message="Copying target platform from ${platform.dir}" />
				<copy todir="${build}/plugins" flatten="true">
					<fileset dir="${platform.dir}">
						<include name="**/*.jar" />
						<exclude name="**/lib/" />
						<exclude name="**/lib-*/" />
						<exclude name="**/.svn/" />
					</fileset>
				</copy>
			</then>
		</if>

		<!-- copy JRE -->
		<if>
			<and>
				<isset property="jre.tocopy" />
				<isset property="include.jre" />
				<equals arg1="${include.jre}" arg2="true" casesensitive="false" trim="true" />
			</and>
			<then>
				<echo message="Copying JRE from ${jre.tocopy}" />
				<copy todir="${release}/src/jre">
					<fileset dir="${jre.tocopy}">
						<include name="**/*" />
					</fileset>
				</copy>
			</then>
		</if>

		<antcall target="prepare.components" />

		<antcall target="prepare.custom" />
	</target>

	<!-- Empty default custom preparation target -->
	<target name="prepare.custom">
		<echo message="Custom preparation step: Override target prepare.custom" />
	</target>

	<!-- Copy all components to the build directory -->
	<target name="prepare.components">
		<fail unless="components" message="Please provide a value for the 'components' property." />

		<!-- create temporary directory -->
		<mkdir dir="${build}" />

		<foreach list="${components}" delimiter="|" target="prepare.component" param="component" inheritall="true" />
	</target>

	<!-- Copy a component to the build directory -->
	<target name="prepare.component">
		<!-- Extract information from component param -->
		<propertyregex property="c.name" input="${component}" regexp="${component.format}" select="\1" override="true" />
		<propertyregex property="c.from" input="${component}" regexp="${component.format}" select="\2" override="true" />
		<propertyregex property="c.to" input="${component}" regexp="${component.format}" select="\3" override="true" />
		<propertyregex property="c.excludes" input="${component}" regexp="${component.format}" select="\4" override="true" />

		<echo message="Preparing component &quot;${c.name}&quot;" />
		<echo message="Source directory: ${c.from}" />
		<echo message="Target directory: ${build}/${c.to}" />
		<echo message="Excludes: ${c.excludes}" />

		<!-- copy component -->
		<copy todir="${build}/${c.to}">
			<fileset dir="${c.from}" excludes="${c.excludes}" />
		</copy>
	</target>

	<!-- Build the product -->
	<target name="build" depends="prepare" description="Build the product">
		<fail unless="eclipse" message="Please provide the environment variable &quot;eclipse&quot; pointing to your Eclipse RCP with Delta Pack installation" />
		<fail unless="product" message="Please provide the environment variable &quot;product&quot; pointing to your product definition file (e.g. ../plugins/AdminTool/CityServer3D.AdminTool.product)" />
		<fail unless="buildId" message="Please provide the environment variable &quot;buildId&quot; defining your build identifer used for build output (e.g. &quot;AdminTool&quot;)" />
		<fail unless="topLevelElementId" message="Please provide the environment variable &quot;topLevelElementId&quot; defining your top level plugin id (usually the one which contains the product defintion file)" />
		<fail unless="os" message="Please provide the environment variable &quot;os&quot; defining the target operating system of the product to build (e.g. &quot;win32&quot; or &quot;linux&quot;)" />
		<fail unless="ws" message="Please provide the environment variable &quot;ws&quot; defining the target window system of the product to build (e.g. &quot;win32&quot; or &quot;gtk&quot;)" />
		<fail unless="arch" message="Please provide the environment variable &quot;arch&quot; defining the architecture of the product to build (e.g. &quot;x86&quot; or &quot;x86_64&quot;)" />

		<fail unless="launcherName" message="Please provide the environment variable &quot;launcherName&quot;, it must be the same as defined in the .product file" />

		<!-- convert relative paths to absolute paths -->
		<path id="absoluteEclipse" path="${eclipse}" />

		<echo message="Starting headless build of ${product}" />
		<echo message="Using eclipse installation at ${eclipse}" />

		<!-- run PDE build -->
		<java classname="org.eclipse.core.launcher.Main" fork="true" failonerror="true">
			<arg value="-application" />
			<arg value="org.eclipse.ant.core.antRunner" />
			<arg value="-buildfile" />
			<arg value="${eclipse}/plugins/org.eclipse.pde.build_3.6.2.R36x_20110203/scripts/productBuild/productBuild.xml" />
			<arg value="-Dbuilder=${toString:absoluteCommon}" />
			<!-- path to build.properties -->
			<arg value="-DbuildDirectory=${toString:absoluteBuild}" />
			<arg value="-Dbase=${toString:absoluteEclipse}" />
			<arg value="-DbaseLocation=${toString:absoluteEclipse}" />
			<arg value="-Dproduct=${product}" />
			<arg value="-DbuildId=${buildId}" />
			<arg value="-DtopLevelElementId=${topLevelElementId}" />
			<arg value="-Dconfigs=${os},${ws},${arch}" />
			<classpath>
				<pathelement location="${eclipse}/plugins/org.eclipse.equinox.launcher_1.1.1.R36x_v20101122_1400.jar" />
			</classpath>
		</java>

		<!-- unzip artifact -->
		<unzip src="${build}/${buildLabel}/${buildId}-${os}.${ws}.${arch}.zip" dest="${release}" overwrite="true" />

		<!-- run unit tests (unless the target "no-unit-tests" has been called) -->
		<if>
			<not>
				<isset property="no-unit-tests" />
			</not>
			<then>
				<antcall target="run-unit-tests" />
			</then>
		</if>
	</target>

	<!-- build and pack the server -->
	<target name="package-server" depends="build" description="Build and package the server">
		<!-- prepare server -->
		<property file="${release}/src/.eclipseproduct" />
		<delete dir="${release}/${buildId}-${version}-${tag}" />
		<property name="buildVersion" value="${buildId}-${version}-${tag}" />
		<move file="${release}/src" tofile="${release}/${buildVersion}" />

		<!-- delete unit test fragments -->
		<delete verbose="true">
			<fileset dir="${release}/${buildVersion}/plugins" includes="*.test_*.jar" />
		</delete>

		<!-- add additional launch properties -->
		<if>
			<isset property="launch.properties" />
			<then>
				<echo message="Additional system properties to be provided for launch: ${launch.properties}" />
				<foreach
					list="${launch.properties}" 
					delimiter="," 
					target="add.launch.property" 
					param="launch.property" 
					inheritall="true" />
			</then>
		</if>

		<!-- custom pre-package step -->
		<!--antcall target="package-server.pre" /-->

		<!-- package server -->
		<antcall target="server-pack-${os}" />
	</target>

	<!-- add a launch property -->
	<target name="add.launch.property">
		<fail unless="${launch.property}" message="The property ${launch.property} must be set" />

		<propertycopy name="launch.property.value" from="${launch.property}" />

		<!-- check if -vmargs parameter is present -->
		<loadfile property="launchIniFile"
				srcfile="${release}/${buildVersion}/${launcherName}.ini">
			<filterchain>
				<linecontainsregexp>
					<regexp pattern="-vmargs" />
				</linecontainsregexp>
				<striplinebreaks/>
			</filterchain>
		</loadfile>
		<!-- add -vmargs if not present -->
		<if>
			<not>
				<equals arg1="${launchIniFile}" arg2 ="-vmargs" />
			</not>
			<then>
				<concat destfile="${release}/${buildVersion}/${launcherName}.ini" fixlastline="true"
						append="true">-vmargs${line.separator}</concat>
			</then>
		</if>

		<!-- append launch property -->
		<echo message="Adding parameter for setting the ${launch.property} system property to ${launch.property.value}" />
		<concat destfile="${release}/${buildVersion}/${launcherName}.ini" fixlastline="true"
			append="true">-D${launch.property}=${launch.property.value}${line.separator}</concat>
	</target>

	<!-- package server without running unit tests -->
	<target name="server-no-unit-tests" description="Build and package server without running unit tests">
		<property name="no-unit-tests" value="true" />
		<antcall target="package-server" />
	</target>

	<!-- Empty default custom pre server package target -->
	<target name="package-server.pre">
		<echo message="Custom pre server package step: Override target package-server.pre" />
	</target>

	<!-- pack server for windows -->
	<target name="server-pack-win32">
		<property name="buildVersion" value="${buildId}-${version}-${tag}" />
		<property name="serviceLauncher" value="${serviceExeName}.exe" />
		<property name="serviceIni" value="${serviceExeName}.ini" />

		<!-- copy windows service configuration file -->
		<copy file="${common.loc}/startup/server/win32/jsl.ini" tofile="${release}/${buildVersion}/${serviceIni}" />

		<!-- copy windows service launcher -->
		<condition property="service-wrapper" value="jsl.exe">
			<equals arg1="${arch}" arg2="x86" />
		</condition>
		<condition property="service-wrapper" value="jsl64.exe">
			<equals arg1="${arch}" arg2="x86_64" />
		</condition>
		<copy file="${common.loc}/startup/server/win32/${service-wrapper}"
			tofile="${release}/${buildVersion}/${serviceLauncher}" />

		<!-- generate command line in service configuration file -->
		<ant antfile="${common.loc}/startup/server/win32/build-jsl-ini.xml" inheritall="false">
			<property name="src" value="${release}/${buildVersion}" />
			<property name="launcher.ini" value="${launcherName}.ini" />
			<property name="service.ini" value="${serviceIni}" />
		</ant>

		<!-- copy service installer scripts -->
		<copy todir="${release}/${buildVersion}">
			<fileset dir="${common.loc}/startup/server/win32">
				<include name="*.bat" />
			</fileset>
		</copy>

		<replace dir="${release}/${buildVersion}"
			token="@LAUNCHER" value="${serviceLauncher}"
			summary="yes" includes="*.bat" />
		<replace dir="${release}/${buildVersion}"
			token="@SERVICE_NAME" value="${serviceName}"
			summary="yes" includes="*.ini" />
		<replace dir="${release}/${buildVersion}"
			token="@SERVICE_SHORT" value="${serviceExeName}"
			summary="yes" includes="*.ini" />

		<zip destfile="${release}/${buildId}-${version}-${tag.hyphen}${os}.${ws}.${arch}.zip"
				basedir="${release}" includes="${buildVersion}/**" />
	</target>

	<!-- pack server for linux -->
	<target name="server-pack-linux">
		<property name="buildVersion" value="${buildId}-${version}-${tag}" />

		<copy todir="${release}/${buildVersion}">
			<fileset dir="${common.loc}/startup/server/linux">
				<include name="*.sh" />
			</fileset>
		</copy>

		<!-- rename launcher.sh -->
		<move file="${release}/${buildVersion}/launcher.sh"
			toFile="${release}/${buildVersion}/${launcherName}.sh" />

		<!-- replace references to launcher script and binary -->
		<replace dir="${release}/${buildVersion}"
			token="@LAUNCHER" value="${launcherName}"
			summary="yes" includes="*.sh" />

		<tar destfile="${release}/${buildId}-${version}-${tag.hyphen}${os}.${ws}.${arch}.tar.gz"
			compression="gzip" longfile="gnu">
			<tarfileset dir="${release}" mode="755">
				<include name="${buildVersion}/${launcherName}" />
				<include name="${buildVersion}/*.sh" />
			</tarfileset>

			<tarfileset dir="${release}">
				<include name="${buildVersion}/**" />
				<exclude name="${buildVersion}/${launcherName}" />
				<exclude name="${buildVersion}/*.sh" />
			</tarfileset>
		</tar>
	</target>

	<!-- run all unit test bundles found in the plugins directory -->
	<target name="run-unit-tests">
		<property name="plugins" value="${release}/src/plugins" />
		<property name="testlogs" value="${build}/testlogs" />

		<mkdir dir="${testlogs}" />

		<!-- execute unit tests for all test bundles -->
		<foreach target="run-unit-test" param="testBundle" inheritall="true">
			<path>
				<fileset dir="${plugins}">
					<include name="*.test_*.jar" />
					<exclude name="de.cs3d.util.osgi.test_*.jar" />
				</fileset>
			</path>
		</foreach>
	</target>

	<!-- run a specific unit test bundle. the bundle's name must be
		 specified through the "testBundle" property -->
	<target name="run-unit-test" >
		<!-- get symbolic name -->
		<path id="testBundlePath" path="${testBundle}" />
		<pathconvert targetos="unix" property="unixTestBundle" refid="testBundlePath" />
		<propertyregex property="testBundleName"
			input="${unixTestBundle}"
			regexp=".*/(.+)_.*"
			select="\1" />

		<!-- copy osgi test bundle to plugins (need test executor inside test framework instance) -->
		<copy todir="${plugins}">
			<fileset dir="${common.loc}/test">
				<include name="de.cs3d.util.osgi.test_*.jar" />
				<include name="de.fhg.igd.osgi.util_*.jar" />
			</fileset>
		</copy>

		<!-- execute unit test -->
		<echo message="Executing unit tests for bundle ${testBundleName}..." />
		<java classname="de.cs3d.util.osgi.test.OSGITestRunner"
			fork="true" failonerror="false" maxmemory="512M">
			<arg value="-formatter" />
			<arg value="xml" />
			<arg value="-todir" />
			<arg value="${testlogs}" />
			<arg value="${testBundleName}" />
			<arg value="-bundlePath" />
			<arg value="${plugins}" />
			<sysproperty key="osgi.test.plugins" value="${plugins}" />
			<syspropertyset refid="proxy-props" />
			<classpath>
				<pathelement path="${plugins}/org.eclipse.osgi_3.6.2.R36x_v20110210.jar" />
				<!--fileset dir="${plugins}">
					<include name="de.cs3d.util.osgi.test_*.jar" />
				</fileset-->
				<fileset dir="${common.loc}/test">
					<include name="de.cs3d.util.osgi.test_*.jar" />
				</fileset>
			</classpath>
		</java>

		<!-- remove osgi test bundle -->
		<delete verbose="true">
			<fileset dir="${plugins}" includes="de.cs3d.util.osgi.test_*.jar" />
		</delete>
	</target>

	<!-- build and pack the client -->
	<target name="package-client" depends="build" description="Build and package the client">
		<!-- package client -->
		<antcall target="client-pack-${os}" />
	</target>

	<!-- package server without running unit tests -->
	<target name="client-no-unit-tests" description="Build and package client without running unit tests">
		<property name="no-unit-tests" value="true" />
		<antcall target="package-client" />
	</target>

	<!-- Package the client for Windows -->
	<target name="client-pack-win32" description="Package the client for Windows">
		<var name="client-variant" value="msi" />
		<if>
			<isset property="wix"/>
			<then>
			</then>
			<else>
				<var name="client-variant" value="zip" />
			</else>
		</if>
		<antcall target="client-pack-win32-${client-variant}" />
	</target>
	
	<!-- pack client for windows as zip archive -->
	<target name="client-pack-win32-zip">
		<!-- prepare -->
		<property file="${release}/src/.eclipseproduct" />
		<delete dir="${release}/${buildId}-${version}-${tag}" />
		<property name="buildVersion" value="${buildId}-${version}-${tag}" />
		<move file="${release}/src" tofile="${release}/${buildVersion}" />

		<zip destfile="${release}/${buildId}-${version}-${tag.hyphen}${os}.${ws}.${arch}.zip">
			<zipfileset dir="${release}">
				<include name="${buildVersion}/**" />
			</zipfileset>
		</zip>
	</target>

	<target name="client-pack-win32-msi" description="Package the client as MSI installer">
		<!-- check other environment variables -->
		<fail unless="wix" message="Please provide the environment variable &quot;wix&quot; pointing to your Windows XML Installer Kit installation (e.g. &quot;C:\Program Files\Windows Installer XML v3&quot;)" />
		<fail unless="language" message="Please provide the environment variable &quot;language&quot; defining the installer language (&quot;de&quot; or &quot;en&quot;)" />

		<fail unless="title" message="Please provide the environment variable &quot;title&quot; defining the application title" />
		<fail unless="wxs.dir" message="Please provide the environment variable &quot;wxs.dir&quot; pointing to the directory where the configurations and resources (in subdirectories) for the Windows XML Installer Kit reside (e.g. ../release)" />
		<fail unless="wxs.file.ui" message="Please provide the environment variable &quot;wxs.file.ui&quot; defining the name of the Windows XML Installer Kit UI configuration file" />
		<fail unless="wxs.file.config" message="Please provide the environment variable &quot;wxs.file.config&quot; defining the name of the Windows XML Installer Kit basic configuration file" />

		<!-- set properties for the installer build -->
		<condition property="wix.arch" value="x86">
			<equals arg1="${arch}" arg2="x86" />
		</condition>
		<condition property="wix.arch" value="x64">
			<equals arg1="${arch}" arg2="x86_64" />
		</condition>

		<path id="absoluteWxs" path="${wxs.dir}" />

		<!-- build installer -->
		<ant antfile="${common.loc}/startup/client/win32/build.xml" dir="${release}" inheritall="false" >
			<property name="tag" value="${tag}" />
			<property name="wix.arch" value="${wix.arch}" />
			<property name="language" value="${language}" />
			<property name="wix.dir" value="${wix}" />
			<property name="buildId" value="${buildId}" />
			<property name="title" value="${title}" />

			<property name="wxs.dir" value="${toString:absoluteWxs}" />
			<property name="wxs.file.ui" value="${wxs.file.ui}" />
			<property name="wxs.file.config" value="${wxs.file.config}" />

			<property name="shortName" value="${launcherName}" />

			<property name="GUID.UpgradeCode" value="${GUID.UpgradeCode}" />
			<property name="GUID.ApplicationShortcut" value="${GUID.ApplicationShortcut}" />
			<property name="deploymentSpecificWxs" value="${deploymentSpecificWxs}" />
		</ant>
	</target>

	<!-- pack client for linux -->
	<target name="client-pack-linux">
		<!-- prepare -->
		<property file="${release}/src/.eclipseproduct" />
		<delete dir="${release}/${buildId}-${version}-${tag}" />
		<property name="buildVersion" value="${buildId}-${version}-${tag}" />
		<move file="${release}/src" tofile="${release}/${buildVersion}" />

		<!--copy todir="${release}/${buildVersion}">
			<fileset dir="${common.loc}/startup/client/linux">
				<include name="*.sh" />
			</fileset>
		</copy-->

		<!-- rename launcher.sh -->
		<!-- move file="${release}/${buildVersion}/launcher.sh"
			toFile="${release}/${buildVersion}/${launcherName}.sh" /-->

		<!-- replace references to launcher script and binary -->
		<!-- replace dir="${release}/${buildVersion}"
			token="@LAUNCHER" value="${launcherName}"
			summary="yes" includes="*.sh" /-->

		<tar destfile="${release}/${buildId}-${version}-${tag.hyphen}${os}.${ws}.${arch}.tar.gz"
			compression="gzip" longfile="gnu">
			<tarfileset dir="${release}" mode="755">
				<include name="${buildVersion}/${launcherName}" />
				<include name="${buildVersion}/*.sh" />
			</tarfileset>

			<tarfileset dir="${release}">
				<include name="${buildVersion}/**" />
				<exclude name="${buildVersion}/${launcherName}" />
				<exclude name="${buildVersion}/*.sh" />
			</tarfileset>
		</tar>
	</target>

	<!-- pack client for macosx -->
	<target name="client-pack-macosx">
		<!-- prepare -->
		<property file="${release}/src/.eclipseproduct" />
		<delete dir="${release}/${buildId}-${version}-${tag}" />
		<property name="buildVersion" value="${buildId}-${version}-${tag}" />
		<move file="${release}/src" tofile="${release}/${buildVersion}" />

		<tar destfile="${release}/${buildId}-${version}-${tag.hyphen}${os}.${ws}.${arch}.tar.gz"
			compression="gzip" longfile="gnu">
			<tarfileset dir="${release}" mode="755">
				<include name="${buildVersion}/${launcherName}.app/Contents/MacOS/${launcherName}" />
			</tarfileset>

			<tarfileset dir="${release}">
				<include name="${buildVersion}/**" />
				<exclude name="${buildVersion}/${launcherName}.app/Contents/MacOS/${launcherName}" />
			</tarfileset>
		</tar>
	</target>
</project>