<?xml version="1.0" encoding="UTF-8"?>

<!--+~~~~~~~~~~~~~+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+
	|  |  |_|_|_|_|   Fraunhofer-Institut für Graphische Datenverarbeitung   |
	|__|__|_|_|_|_|     (Fraunhofer Institute for Computer Graphics)         |
	|  |  |_|_|_|_|                                                          |
	|__|__|_|_|_|_|                                                          |
	|  __ |    ___|                                                          |
	| /_  /_  / _ |     Fraunhoferstrasse 5                                  |
	|/   / / /__/ |     D-64283 Darmstadt, Germany                           |
	+~~~~~~~~~~~~~+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+-->

<!--+ 
	| Buildfile for Client Applications
	|
	| Usage:
	|   ant -f build.xml -Declipse=<eclipse root> -Dproduct=<product file>
	|       -DbuildId=<build id> -DtopLevelElementId=<top level id>
	|       -Dos=<operating system> -Dws=<window system> -Darch=<architecture>
	|		-Dcomponents=<components> -Dplatform.dir=<platform dir>
	|		-DlauncherName=<launcher name>
	|       [-Dtag=<tag>] [-DadditionalProperties=<additional>]
	|		[-Dbuild=<build directory>] [-Dinclude.jre=<include jre>]
	|		[-Djre=<path to jre>]
	|
	|  <eclipse root>    - absolute path where Eclipse with Delta Pack is
	|                      installed (e.g. C:\eclipse)
	|  <product file>    - name of the product definition file to export
	|                      (e.g. ../plugins/AdminTool/CityServer3D.AdminTool.product)
	|  <build id>        - build identifier (e.g. "AdminTool"). This will be included in
	|                      the output filename.
	|  <top level id>    - the identifier of your top level plugin (usually the one
	|                      which contains the product definition file).
	|  <os>              - the target operating system of the product to build (e.g. "win32" or "linux")
	|  <ws>              - the target window system (e.g. "win32" or "gtk")
	|  <arch>            - the architecture of the product to build (e.g. "x86" or "x86_64")
	|  <tag>             - String used to tag the result file (optional)
	|  <additional>      - a filename of a properties file which defines additional
	|                      properties or the ones that are static and you don't want
	|                      to set in the command line (optional)
	|  <build directory> - absolute path where the build files
	|                      should be copied to (e.g. C:\temp\build) (optional)
	|  <components>      - components separated by |, component format: <name>;<from>;<to>;<excludes>,
	|                      where <to> is relative to the build directory
	|  <platform dir>    - directory where the target platform resides
	|  <launcher name>   - name of the launcher, must match the definition in the product
	|  <include jre>     - whether a JRE shall be included ("true" or "false" (default))
	|  <path to jre>     - path to the JRE to include if include.jre is set to "true",
	|                      if this is not set the java.home environment variable will be used
	|
	| Client specific properties
	|  - win32 (Windows XML Installer Kit)
	|    * wix				- absolute path where the Windows XML Installer Kit is installed
	|    * language			- the installer language ("de" or "en")
	|    * title			- the application name
	|    * wxs.dir			- directory where the .wxs files and any resources (in subdirectories) reside
	|    * wxs.file.config	- name of the .wxs configuration (without extension)
	|    * wxs.file.ui		- name of the .wxs ui configuration (without extension)
	|
	| Server specific properties
	|  - win32 (Windows Service using JSL)
	|    * serviceExeName	- name of the service executable (without extension),
	|						  must be different from <launcher name>
	|    * serviceName		- name of the service
	|
	| Targets:
	|  build				- build everything and run unit tests
	|  package-server		- build and package as server
	|  server-no-unit-tests - build and package as server without running unit tests
	|  package-client		- build and package as client application
	|  client-no-unit-tests - build and package as client without running unit tests
	|
	| Author: Michel Krämer, Simon Templer
	| Last changed: $Id: build.xml 966 2009-12-09 09:12:10Z stempler $
	+-->

<project name="Client Application" default="package-client">
	
	<description>
		Client Application Build File
	</description>
	
	<!-- ant file location -->
	<dirname property="loc" file="${ant.file.Client Application}"/>
	
	<!-- include common build file -->
	<import file="${loc}/common/common.xml" />
	
	<target name="prepare.custom">
		<!-- customize product about -->
		<property name="product-plugin-xml" value="${build}/plugins/eu.esdihumboldt.hale.ui.application/plugin.xml" />
		<property environment="env" />
		<replace file="${product-plugin-xml}" token="___build___" value="${env.BUILD_ID}" summary="true" />
		<replace file="${product-plugin-xml}" token="___revision___" value="${env.GIT_COMMIT}" summary="true" />
	</target>
	
</project>
