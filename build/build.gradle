// Fraunhofer Institute for Computer Graphics Research (IGD)
// Department Graphical Information Systems (GIS)
//
// Copyright (c) 2004-2013 Fraunhofer IGD. All rights reserved.
//
// This source code is property of the Fraunhofer IGD and underlies
// copyright restrictions. It may only be used with explicit
// permission from the respective owner.

apply plugin: 'download-task'
apply plugin: 'java'
apply from: 'gradle/tycho.gradle'
apply from: 'gradle/commitStage.gradle'
apply from: 'gradle/integrationTestStage.gradle'
apply from: 'gradle/productionStage.gradle'
// apply from: 'gradle/checkDependencies.gradle'
// apply from: 'gradle/deployArtifacts.gradle'

import org.eclipse.core.runtime.internal.adaptor.EclipseEnvironmentInfo

group = 'eu.esdihumboldt'
version = '2.9.0'

defaultTasks 'commitStage'

ext {
    rootDir = file('..')
    parentArtifactId = 'rcp-parent'

    // true if Maven artifacts should be created instead of OSGI bundles
    generateArtifacts = false

    // suffix for bundle version numbers
    versionSuffix = ''

    // path to default unit test launch configuration
    defaultUnitTestLaunchConfiguration = file('../common/plugins/eu.esdihumboldt.hale.common.core.test/defaultUnitTestLaunchConfiguration.launch')

    // path to the platform bundle
    platformBundle = file('../platform')
	// name of the platform definition file (w/o extension [.target])
	platformFileName = 'hale-platform' 

    // true if MongoDB should be included in the final product
    includeMongoDB = false

    // true if InstantReality Transcoder should be included in the final product
    includeTranscoder = false

    // a list of additional files to include in the final product (default: empty)
    additionalFilesToPackage = []

    // The title of the win32 installer
    win32InstallerTitle = 'HALE'

    // The GUID used by the win32 installer for product upgrades (must never change!)
    win32InstallerUpgradeGUID = '6b6151c0-e3f9-11de-8a39-0800200c9a66'

    // The GUID for the shortcuts the installer will create
    win32InstallerShortcutGUID = '76ed8ea0-e3f9-11de-8a39-0800200c9a66'

    // Name of the Windows service
    serviceName = 'HALE Server'

    // Name of the Windows service executable (without extension), must be different
    // from the product's launcher name
    serviceExeName = 'hale_server'

    // path to the bundles to build
    bundles = [
		file('../common/plugins'),
		file('../cst/plugins'),
		file('../doc/plugins'),
		file('../io/plugins'),
		file('../server/plugins'),
		file('../ui/plugins'),
		file('../util/plugins'),
		file('../ext/styledmap'),
		file('../ext/xslt'),
		file('../ext/ageobw')
    ]
	
	// bundles to exclude for the build (symbolic names)
	excludeBundles = [
		'eu.esdihumboldt.hale.ui.application.help.internal',
		'eu.esdihumboldt.hale.ui.application.help.external'
	]

    // URL to the directory containing mirrored artifacts (Maven, JRE, ...)
    cs3dMirrorUrl = 'http://www.cityserver3d.de/updates2/56abe3f5559dc32c35c6a7e5e7acbcb05659132c'

    // Names of zip files containing Java Runtimes (sorted by their respective platform)
    jreArtifacts = [
        'win32': [
            'win32': [
                'x86': 'jre-7u5-windows-i586.zip',
                'x86_64': 'jre-7u5-windows-x64.zip'
            ]
        ],
        'linux': [
            'gtk': [
                'x86': 'jre-7u5-linux-i586.zip',
                'x86_64': 'jre-7u5-linux-x64.zip'
            ]
        ]
    ]

    // Names of zip files containing mongodb instances (sorted by their respective platform)
//    mongodbArtifacts = [
//        'win32': [
//            'win32': [
//                'x86_64': 'mongodb-win32-x86_64-2.2.0.zip'
//            ]
//        ],
//        'linux': [
//            'gtk': [
//                'x86_64': 'mongodb-linux-x86_64-2.2.0.tgz'
//            ]
//        ]
//    ]

    // Names of zip files containing Transcoder instances (sorted by their respective platform)
//    transcoderArtifacts = [
//        'win32': [
//            'win32': [
//                'x86': 'transcoder_0_2_6.zip',
//                'x86_64': 'transcoder_0_2_6.zip'
//            ]
//        ]
//    ]
}

configureEnvironment()

def configureEnvironment() {
    def eei = EclipseEnvironmentInfo.getDefault()
    if (!ext.properties.containsKey('osgiOS')) {
        ext.osgiOS = eei.getOS()
    }
    if (!ext.properties.containsKey('osgiWS')) {
        ext.osgiWS = eei.getWS()
    }
    if (!ext.properties.containsKey('osgiArch')) {
        ext.osgiArch = eei.getOSArch()
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.9'
}

task cli {
    // configure this task. the CommandLineBuilder will add the
    // actual task to execute as a dependency to this task
    if (project.ext.properties.containsKey("args")) {
        new CommandLineBuilder(project).run(project.ext.args)
    }
}

clean << {
    project.delete(new File(project.rootDir, 'ObjectStore'))
    project.delete(new File(project.rootDir, 'target'))
    project.delete(new File(project.ext.rootDir, 'pom.xml'))
    project.delete(new File(project.ext.platformBundle, 'pom.xml'))

    // Make sure no tycho artifacts survive cleaning.
    new BundleParser(project).getParsedBundles().each { b ->
        println("Cleaning ${b.key}")
        project.delete(new File(b.value.path, '/target'))
        project.delete(new File(b.value.path, '/pom.xml'))
        // bin folder is not used by tycho
    }
}
