// Fraunhofer Institute for Computer Graphics Research (IGD)
// Department Spatial Information Management (GEO)
//
// Copyright (c) 2013-2014 Fraunhofer IGD.
//
// This file is part of hale-build.
//
// hale-build is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// hale-build is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with hale-build.  If not, see <http://www.gnu.org/licenses/>.

apply plugin: 'de.undercouch.download'
apply plugin: 'java'
apply from: 'gradle/tycho.gradle'
apply from: 'gradle/updateSite.gradle'
apply from: 'gradle/commitAndProductionStage.gradle'
apply from: 'gradle/deployArtifacts.gradle'
// apply from: 'gradle/checkDependencies.gradle'


import java.text.DateFormat
import java.text.SimpleDateFormat

group = 'eu.esdihumboldt'

Calendar calendar = Calendar.getInstance();
DateFormat dateFormat = new SimpleDateFormat('YYYYMMddHHmm');

gradle.taskGraph.whenReady {
	// determine build ID
	String buildID = System.getenv()['TRAVIS_BUILD_ID'] // set by Travis CI
	if (buildID == null) {
		buildID = dateFormat.format(calendar.getTime())
	}
	project.ext.buildId = buildID

	// determine context qualifier
	if (project.version.endsWith("-SNAPSHOT")) {
		// buildID as qualifier
//		project.ext.contextQualifier = buildID
		project.ext.contextQualifier = 'SNAPSHOT'
	}
	else {
		// mark as release
		project.ext.contextQualifier = 'release'
	}
}

defaultTasks 'commitStage'

ext {
    rootDir = file('..')
    parentArtifactId = 'rcp-parent'
	defaultJavaVersion = '1.7'

    // true if Maven artifacts should be created instead of OSGI bundles
    generateArtifacts = false

    // suffix for bundle version numbers
    versionSuffix = ''

	// ID of generated update site feature
	generatedUpdateSiteFeatureId = 'eu.esdihumboldt.hale.all.feature'
	generatedUpdateSiteFeatureLabel = 'Generated overall feature'

    // path to the platform bundle
    platformBundle = file('../platform')

	// name of the platform definition file (w/o extension [.target])
	platformFileName = 'hale-platform'

	// pattern for recognizing unit test bundles
	testBundlePattern = '*.test_*.jar'

    // true if MongoDB should be included in the final product
    includeMongoDB = false

    // true if InstantReality Transcoder should be included in the final product
    includeTranscoder = false

    // a list of additional files to include in the final product (default: empty)
    additionalFilesToPackage = []

    // path to the bundles and features to build
    bundles = [
		file('../common/plugins'),
		file('../common/features'),
		file('../cst/plugins'),
		file('../cst/features'),
		file('../doc/plugins'),
		file('../io/plugins'),
		file('../io/features'),
		file('../server/plugins'),
		file('../server/features'),
		file('../ui/plugins'),
		file('../ui/features'),
		file('../util/plugins'),
		file('../util/features'),
		file('../app/plugins'),
		file('../ext/styledmap'),
		file('../ext/xslt'),
		file('../ext/ageobw'),
		file('../ext/fme'),
		file('../ext/nonosgi'),
		file('../ext/geom'),
		file('../ext/adv')
    ]

	// bundles to exclude for the build (symbolic names)
	excludeBundles = [
	  // dependencies for this feature currently not included in platform
    //'eu.esdihumboldt.hale.ui.feature.liveeditor'
	]

	// bundles or fragments that are required additionally for compilation
	extraRequirements = [
		// this system bundle extension fragment is otherwise not found by tycho
		'javax.annotation.extensions'
	]

	/*
	 * Specify OS specific bundles or features. Maps symbolic names
	 * to OS identifiers.
	 *
	 * Maven tycho has problems with platform/os specific bundles.
	 * Thus we have to filter them in the product configuration.
	 * As this happens based on the bundle symbolic names, we have
	 * to provide information for which OS each bundle should be
	 * applied.
	 * see also productionStage.gradle#filterPlatformSpecificFragments
	 * FIXME remove once maven tycho can deal with it on its own
	 */
	osSpecificBundles = [
		'eu.esdihumboldt.hale.ui.application.help.internal': ['macosx', 'win32'],
		'eu.esdihumboldt.hale.ui.application.help.external': ['linux'],
		// features
		'eu.esdihumboldt.hale.ui.feature.win32': ['win32'],
		'eu.esdihumboldt.hale.ui.feature.linux': ['linux'],
		'eu.esdihumboldt.hale.ui.feature.macosx': ['macosx']
	]
	
	/*
	 * List of bundles that are not platform specific, even if they are detected as such.
	 */
	notPlatformSpecificBundles = [
		'com.github.jnr.x86asm'
	]

	// URL to the directory containing mirrored artifacts (Maven, JRE, ...)
	//artifactsCommit = '6589f561a36b8a6fe4cd6a115fdc892bbf812c68'
	//artifactsMirrorUrl = "https://gitlab.wetransform.to/hale/hale-build-support/raw/${artifactsCommit}"
	artifactsMirrorUrl = "http://build-artifacts.wetransform.to/hale-build-support"

    // Names of zip files containing Java Runtimes (sorted by their respective platform)
    jreArtifacts = [
        'win32': [
            'win32': [
                'x86': 'OpenJDK8U-jre_x86-32_windows_hotspot_8u232b09.tar.gz',
                'x86_64': 'OpenJDK8U-jre_x64_windows_hotspot_8u232b09.tar.gz'
            ]
        ],
        'linux': [
            'gtk': [
                'x86_64': 'OpenJDK8U-jre_x64_linux_hotspot_8u232b09.tar.gz'
            ]
        ]/*, -- not available right now
        'macosx': [
            'cocoa': [
                'x86_64': 'jdk-min-8u91-macosx-x64.tar.gz'
            ]
        ]*/
    ]

    // Names of zip files containing mongodb instances (sorted by their respective platform)
//    mongodbArtifacts = [
//        'win32': [
//            'win32': [
//                'x86_64': 'mongodb-win32-x86_64-2.2.0.zip'
//            ]
//        ],
//        'linux': [
//            'gtk': [
//                'x86_64': 'mongodb-linux-x86_64-2.2.0.tgz'
//            ]
//        ]
//    ]

    // Names of zip files containing Spatialite libraries (sorted by their respective platform)
    spatialiteArtifacts = [
       'win32': [
           'win32': [
               'x86': 'mod_spatialite-4.2.0-win-x86.zip',
               'x86_64': 'mod_spatialite-4.2.0-win-amd64.zip'
           ]
       ]
    ]
}

if (project.ext.has('additionalConfig')) {
	applyExternalConfiguration(file(project.ext.additionalConfig))
}
else {
	applyExternalConfiguration(file('config.groovy'))
}

def applyExternalConfiguration(File configFile) {
	assert configFile.exists()
	// execute config file as groovy script...
	Binding binding = new Binding();

	// specify the binding for the script
	binding.setVariable('parentDir', configFile.parentFile);

	GroovyShell shell = new GroovyShell(binding);
	def res = shell.evaluate(configFile.text)

	// ... creating a closure to configure the project
	def prjClosure = binding.project.clone()
	prjClosure.delegate = project
	prjClosure.resolveStrategy = Closure.DELEGATE_FIRST
	prjClosure()

//	def extClosure = binding.ext.clone()
//	extClosure.delegate = project.ext
//	extClosure.resolveStrategy = Closure.DELEGATE_FIRST
//	extClosure()
}

configureEnvironment()

def configureEnvironment() {
	def wsMap = [win32: 'win32', linux: 'gtk', macosx: 'cocoa']
	
	def current_os = System.getProperty('os.name')
	if (current_os.substring(0, 5).equalsIgnoreCase('linux'))
	  current_os = 'linux'
	else if (current_os.substring(0, 7).equalsIgnoreCase('windows'))
	  current_os = 'win32'
	else if (current_os.equalsIgnoreCase('Mac OS X'))
	  current_os = 'macosx'

	def current_arch = System.getProperty('os.arch')
	if(current_arch == 'x86' || current_arch == 'i386')
	  current_arch = 'x86'
	else if(current_arch == 'amd64')
	  current_arch = 'x86_64'
	
    if (!ext.properties.containsKey('osgiOS')) {
        ext.osgiOS = current_os
    }
    if (!ext.properties.containsKey('osgiWS')) {
        ext.osgiWS = wsMap[current_os]
    }
    if (!ext.properties.containsKey('osgiArch')) {
        ext.osgiArch = current_arch
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.7'
}

task cli {
    // configure this task. the CommandLineBuilder will add the
    // actual task to execute as a dependency to this task
    if (project.ext.properties.containsKey("args")) {
        new CommandLineBuilder(project).run(project.ext.args)
    }
}

clean << {
    project.delete(new File(project.rootDir, 'ObjectStore'))
    project.delete(new File(project.rootDir, 'target'))
    project.delete(new File(project.ext.rootDir, 'pom.xml'))
    project.delete(new File(project.ext.platformBundle, 'pom.xml'))

    // Make sure no tycho artifacts survive cleaning.
    new BundleParser(project).getParsedBundles().each { b ->
        println("Cleaning ${b.key}")
        project.delete(new File(b.value.path, '/target'))
        project.delete(new File(b.value.path, '/pom.xml'))
        // bin folder is not used by tycho
    }
}
