<!--
// This file builds the UI Installer
//
// Usage:
//   ant -f build.xml -DbuildId=<build id> -Dtitle=<title>
//       -DGUID.UpgradeCode=<upgrade guid> -DGUID.ApplicationShortcut=<shortcut guid>
//       -DdeploymentSpecificWxs=<deployment wxs>
//       -Dwxs.dir=<wxs directory> -Dwxs.file.config=<wxs config>
//       -Dwxs.file.ui=<wxs ui config>
//       -DshortName=<short app name>
//
//  <build id>        - build identifier (e.g. "AdminTool"). This will be included in
//                      the output filename. It must match the name of your main
//                      executable file. For example if the build id is "AdminTool"
//                      your main executable file must be named "AdminTool.exe". The
//                      same rule applies to the ini file name ("AdminTool.ini"). In that
//                      case the installer will also create a program files folder named
//                      "AdminTool" and the program's configuration will be saved in the
//                      user's application settings folder under "AdminTool".
//  <title>           - the installer's title (for example: "CityServer3D AdminTool")
//  <upgrade guid>    - the GUID for the installer's upgrade code
//  <shortcut guid>   - the GUID for the shortcuts the installer will create
//  <deployment wxs>  - a deployment specific WiX source file containing components that
//                      should be included in the installer
//  <wxs directory>   - directory where the .wxs files and any resources (in subdirectories) reside
//  <wxs config>      - name of the .wxs configuration (without extension)
//  <wxs ui config>   - name of the .wxs ui configuration (without extension)
//  <short app name>  - short application name
//
// @author Michel Kraemer
-->

<project name="UI Installer" default="all" basedir=".">
	<description>
		UI Installer Build File
	</description>
	
	<!-- ant file location -->
	<dirname property="loc" file="${ant.file.UI Installer}"/>
	
	<!-- load ant contributions -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${loc}/ant-contrib.jar" />
		</classpath>
	</taskdef>
	
	<property name="build" location="build" />
	<property name="dist" location="target" />
	<property name="src" location="src" />
	<property name="src.jre" location="${src}/jre" />
	<property name="src.plugins" location="${src}/plugins" />
	
	<!-- add hyphen to tag -->
	<condition property="tag.hyphen" value="${tag}-">
		<and>
			<isset property="tag" />
			<not>
				<equals arg1="${tag}" arg2="" trim="true" />
			</not>
		</and>
	</condition>
	<property name="tag.hyphen" value="" />
	
	<!-- load product information -->
	<property file="${src}/.eclipseproduct" />
	
	<!-- set properties according to the selected language -->
	<condition property="cultures" value="de-de">
		<equals arg1="${language}" arg2="de" casesensitive="false" trim="true" />
	</condition>
	<condition property="cultures" value="en-us">
		<equals arg1="${language}" arg2="en" casesensitive="false" trim="true" />
	</condition>
	<condition property="langid" value="1031">
		<equals arg1="${language}" arg2="de" casesensitive="false" trim="true" />
	</condition>
	<condition property="langid" value="1033">
		<equals arg1="${language}" arg2="en" casesensitive="false" trim="true" />
	</condition>
	
	<!-- set properties according to the selected architecure -->
	<condition property="ProgramFilesFolder" value="ProgramFiles64Folder">
		<equals arg1="${wix.arch}" arg2="x64" casesensitive="false" trim="true" />
	</condition>
	<condition property="ProgramFilesFolder" value="ProgramFilesFolder">
		<equals arg1="${wix.arch}" arg2="x86" casesensitive="false" trim="true" />
	</condition>
	
	<!-- Target to clean everything (Deletes the directories
	     ${build} and ${dist}) --> 
	<target name="clean" description="Clean output files">
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build}" />
		<delete dir="${dist}" />
		<echo message="All files removed successfully" />
		<echo />
	</target>
	
	<!-- This target compiles the files and creates the MSI
	     installer package -->
	<target name="all" description="Build installer">
		<fail unless="buildId" message="Please provide the environment variable &quot;buildId&quot; defining your build identifer used for build output (e.g. &quot;AdminTool&quot;)" />
		<fail unless="title" message="Please provide the environment variable &quot;title&quot; defining the installer's title (for example: &quot;CityServer3D AdminTool&quot;)" />
		<fail unless="GUID.UpgradeCode" message="Please provide the environment variable &quot;GUID.UpgradeCode&quot; defining the GUID for the installer's upgrade code" />
		<fail unless="GUID.ApplicationShortcut" message="Please provide the environment variable &quot;GUID.ApplicationShortcut&quot; defining the GUID for the shortcuts the installer will create" />
		
		<property file="${src}/.eclipseproduct" />
		
		<echo message="Build dir: ${build}" />
		<echo message="Version: ${version}" />
		
		<!-- create destination directories -->
		<mkdir dir="${build}" />
		<mkdir dir="${dist}" />
		
		<!-- create object which lists all components in the source
		     directories:
		     
		     result["dirs"]: the directory structure
		     result["components"]: the list of components
		     result["componentrefs"]: a list of references to the
		                              components which shall
		                              be installed
		-->
		<script language="javascript"><![CDATA[
			importClass(java.io.File);
			
			//counters for unique identifiers
			var currentdirid = 0;
			var currentfileid = 0;
			
			/**
			 * This function creates the result object. It recursively
			 * parses the given directory and creates the entries
			 * in the result object.
			 */
			function create_dirs(parent, root) {
				//get relative path to the folder where the source
				//files are located
				var relroot = root.substring(0, root.lastIndexOf('\\') + 1);
				
				//create empty result object
				var result = new Object();
				result["dirs"] = "";
				result["components"] = "";
				result["componentrefs"] = "";
				
				//check if parent is actually a directory
				var parentDir = new File(parent);
				if (!parentDir.isDirectory()) {
					return result;
				}
				
				//create <Directory /> entry for parent
				var dirid = "directory" + currentdirid;
				++currentdirid;
				result["dirs"] = "<Directory Id=\"" + dirid + "\" " +
					"Name=\"" + parentDir.getName() + "\">\n";
				
				//iterate through all files/sub directories in the
				//parent directory and recursively call create_dirs()
				//for each sub directory or create a <Component /> entry
				//for each file.
				var localcomponents = "<DirectoryRef Id=\"" + dirid + "\">\n";
				var files = parentDir.listFiles();
				for (var i = 0; i < files.length; ++i) {
					var childDir = new File(files[i]);
					if (childDir.isDirectory()) {
						//call create_dirs() recursively for the child
						var childresult = create_dirs(files[i], root);
						
						//append values to the result object
						result["dirs"] += childresult["dirs"];
						result["components"] += childresult["components"];
						result["componentrefs"] += childresult["componentrefs"];
					} else {
						//handle a single file...
						//create <Component /> entry
						var id = "sourcefile" + currentfileid;
						++currentfileid;
						var filename = files[i].toString().substring(
							relroot.length());
						localcomponents += "\t<Component Id=\"" + id +
							"\" Guid=\"*\">\n";
						localcomponents += "\t\t<File Id=\"" + id +
							"\" Source=\"" + filename + "\" " +
							"KeyPath=\"yes\" />\n";
						localcomponents += "\t</Component>\n";
						
						result["componentrefs"] += "<ComponentRef Id=\"" +
							id + "\" />\n";
					}
				}
				
				//save values in the result object
				localcomponents += "</DirectoryRef>\n";
				result["components"] += localcomponents;
				result["dirs"] += "</Directory>\n";
				return result;
			}
			
			//get absolute path to source directories
			var src = project.getProperty("src");
			var srcjre = project.getProperty("src.jre");
			var srcplugins = project.getProperty("src.plugins");
			
			//create result object...
			//parse "jre/"
			var result = create_dirs(srcjre, src);
			//parse "plugins/"
			var result2 = create_dirs(srcplugins, src);
			//combine results
			result["dirs"] += result2["dirs"];
			result["components"] += result2["components"];
			result["componentrefs"] += result2["componentrefs"];
			
			//set result properties
			project.setProperty("directories", result["dirs"]);
			project.setProperty("components", result["components"]);
			project.setProperty("componentrefs", result["componentrefs"]);
		]]></script>
		
		<!-- create short version from version property -->
		<script language="javascript"><![CDATA[
			var version = project.getProperty("version");
			var shortversion = "";
			var elements = version.split("\\.");
			if (elements.length > 0) {
				shortversion = shortversion + elements[0];
			}
			if (elements.length > 1) {
				shortversion = shortversion + "." + elements[1];
			}
			if (elements.length > 2) {
				shortversion = shortversion + "." + elements[2];
			}
			project.setProperty("shortversion", shortversion);
		]]></script>
		
		<!-- get relative path to the folder where the source
			 files are located -->
		<script language="javascript"><![CDATA[
			var src = project.getProperty("src");
			var relsrc = src.substring(src.lastIndexOf('\\') + 1);
			project.setProperty("relsrc", relsrc);
		]]></script>
		
		<copy todir="${build}" overwrite="yes" verbose="true">
			<fileset dir="${wxs.dir}">
				<include name="*/**" />
				<include name="${wxs.file.ui}.wxs" />
				<include name="${wxs.file.config}.wxs" />
			</fileset>
		</copy>
		
		<!-- placeholders -->
		<foreach target="wxs.replace" param="filename" inheritall="true">
			<path>
				<fileset dir="${build}" id="wxsFiles">
					<include name="${wxs.file.ui}.wxs" />
					<include name="${wxs.file.config}.wxs" />
				</fileset>
			</path>
		</foreach>
		
		<!-- include deployment specific wxs file -->
        <condition property="deploymentSpecificWxsInclude" value="&lt;?include ${deploymentSpecificWxs} ?&gt;">
        	<and>
            	<isset property="deploymentSpecificWxs" />
            	<not>
                	<equals arg1="${deploymentSpecificWxs}" arg2="" trim="true" />
                </not>
			</and>
        </condition>
		<property name="deploymentSpecificWxsInclude" value="" />
		<replace file="${build}/${wxs.file.config}.wxs" token="@{DEPLOYMENTSPECIFICWXS}" value="${deploymentSpecificWxsInclude}" />
		
		<!-- compile MSI file -->
		<echo message="Compiling WiX source files..." />
		<exec executable="${wix.dir}\bin\candle" failonerror="yes" >
			<arg value="-nologo" />
			<arg value="-arch" />
			<arg value="${wix.arch}" />
			<!--
			<arg value="-ext" />
			<arg value="&quot;${wix.dir}\bin\WixFirewallExtension.dll&quot;" />
			-->
			<arg value="-out" />
			<arg value="${build}\" />
			<arg value="${build}/${wxs.file.config}.wxs" />
			<arg value="${build}/${wxs.file.ui}.wxs" />
			<arg  />
		</exec>
		
		<!-- link MSI file -->
		<echo message="Linking MSI file..." />
		<exec executable="${wix.dir}\bin\light" failonerror="yes">
			<arg value="-nologo" />
			<!-- suppress warning about missing default language
			     for some files -->
			<arg value="-sw1076" />
			<arg value="-out" />
			<arg value="${build}/${buildId}.msi" />
			<arg value="-cultures:${cultures}" />
			<arg value="-ext" />
			<arg value="&quot;${wix.dir}\bin\WixUIExtension.dll&quot;" />
			<!--
			<arg value="-ext" />
			<arg value="&quot;${wix.dir}\bin\WixFirewallExtension.dll&quot;" />
			-->
			<arg value="${build}/${wxs.file.config}.wixobj" />
			<arg value="${build}/${wxs.file.ui}.wixobj" />
		</exec>
		
		<copy tofile="${dist}/${buildId}-${version}-${tag.hyphen}${language}-${wix.arch}.msi"
			file="${build}/${buildId}.msi" overwrite="yes" />
	</target>
	
	<target name="wxs.replace">
		<echo message="Replacing placeholders in WXS file: ${filename}" />
		
		<replace file="${filename}" token="@{SHORTVERSION}" value="${shortversion}" />
		<replace file="${filename}" token="@{SHORTNAME}" value="${shortName}" />
		<replace file="${filename}" token="@{LANGID}" value="${langid}" />
		<replace file="${filename}" token="@{PROGRAMFILESFOLDER}" value="${ProgramFilesFolder}" />
		<replace file="${filename}" token="@{DIRECTORIES}" value="${directories}" />
		<replace file="${filename}" token="@{COMPONENTS}" value="${components}" />
		<replace file="${filename}" token="@{COMPONENTREFS}" value="${componentrefs}" />
		<replace file="${filename}" token="@{SRC}" value="${relsrc}" />
		<replace file="${filename}" token="@{BUILDID}" value="${buildId}" />
		<replace file="${filename}" token="@{TITLE}" value="${title}" />
		<replace file="${filename}" token="@{GUID.UPGRADECODE}" value="${GUID.UpgradeCode}" />
		<replace file="${filename}" token="@{GUID.APPLICATIONSHORTCUT}" value="${GUID.ApplicationShortcut}" />
	</target>
</project>
