// Fraunhofer Institute for Computer Graphics Research (IGD)
// Department Spatial Information Management (GEO)
//
// Copyright (c) 2013-2014 Fraunhofer IGD.
//
// This file is part of hale-build.
//
// hale-build is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// hale-build is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with hale-build.  If not, see <http://www.gnu.org/licenses/>.

//buildscript {
//    dependencies {
//        classpath files('depchk/jdepchk.jar')
//    }
//}

import groovy.text.GStringTemplateEngine
import groovy.xml.MarkupBuilder
import org.apache.maven.cli.MavenCli

task createUpdateSiteFeatureProjectDefinition(type: Copy) {
    from 'templates/plugin-project.xml'
    into new File(buildDir, "gen.site.feature")
    rename { '.project' }
}

/**
 * Creates the update site feature's feature.xml file
 * This file has to be re-created every time a new build is started in
 * order to update all projects.
 * The feature will include all workspace bundles.
 */
task createUpdateSiteFeature(dependsOn: createUpdateSiteFeatureProjectDefinition) << {
    // create pom.xml
    def updateSiteFeaturePath = createUpdateSiteFeatureProjectDefinition.destinationDir
    new PomGenerator(project).makePluginPomFileWithPackaging(updateSiteFeaturePath.name, '1.0.0', false,
            false, 'eclipse-feature', updateSiteFeaturePath, [isJavaProject: false])

    // create build.properties
    new File(updateSiteFeaturePath, 'build.properties').withWriter {
        it << "bin.includes = feature.xml\n"
    }

    // target platform plugins
    def targetPlugins = []
	// currently NONE

    new File(updateSiteFeaturePath, 'feature.xml').withWriter { w ->
        def xml = new MarkupBuilder(w)
        xml.mkp.xmlDeclaration(version: '1.0', encoding: 'utf-8')
        xml.feature('id': updateSiteFeaturePath.name, 'label': updateSiteFeaturePath.name, 'version': '1.0.0') {
            // add workspace plugins
            new BundleParser(project).getParsedBundles().each {
                plugin('id': it.key, 'version': '0.0.0')
            }
            // add required target platform plugins
            targetPlugins.each {
                plugin('id': it[0], 'version': it[1])
            }
        }
    }
}

/**
 * Build all bundles and assemble update site needed for testing
 */
task buildUpdateSite(dependsOn: [ createUpdateSiteFeature, generatePomFiles ]) << {
    def pg = new PomGenerator(project)

    // create pom file
    def updateSitePath = new File(buildDir, 'gen.site')
    updateSitePath.mkdirs()
    pg.makePomFileWithPackaging(updateSitePath.name, '1.0.0', false, false, 'eclipse-repository',
            'pom-repository.xml', updateSitePath)

    // create category.xml
    new File(updateSitePath, 'category.xml').withWriter { w ->
        def template = new GStringTemplateEngine().createTemplate(Helper.resolveTemplate(project, 'category.xml'))
        def result = template.make([
            'featureId': createUpdateSiteFeatureProjectDefinition.destinationDir.name,
            'version': '1.0.0',
        ]).toString()
        w << result
    }

    // generate parent pom file and add update site module(s)
    pg.generateParentPomFile([
        (updateSitePath.name): [
            'version': '1.0.0',
            'path': updateSitePath
        ],
        (createUpdateSiteFeatureProjectDefinition.destinationDir.name): [
            'version': '1.0.0',
            'path': createUpdateSiteFeatureProjectDefinition.destinationDir
        ]
    ])

    // build update site
    def res = new MavenCli().doMain([ 'package' ] as String[], project.ext.rootDir.path, System.out, System.err)
    if (res != 0) {
        throw new RuntimeException("Maven failed with exit code ${res}")
    }
}
