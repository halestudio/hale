// Fraunhofer Institute for Computer Graphics Research (IGD)
// Department Spatial Information Management (GEO)
//
// Copyright (c) 2013-2014 Fraunhofer IGD.
//
// This file is part of hale-build.
//
// hale-build is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// hale-build is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with hale-build.  If not, see <http://www.gnu.org/licenses/>.

import org.akhikhl.unpuzzle.UnpuzzlePlugin

if (!project.plugins.findPlugin(UnpuzzlePlugin)) {
	project.apply(plugin: UnpuzzlePlugin)
}

project.afterEvaluate {
	// make sure unpuzzle tasks are only executed after update site was built
	
	// can only be done in afterEvaluate because unpuzzle for some reason adds the
	// tasks only then
	
	project.tasks['downloadEclipse'].dependsOn('purgeEclipse', 'buildUpdateSite')
	project.tasks['installEclipse'].dependsOn('downloadEclipse')
	project.tasks['uploadEclipse'].dependsOn('downloadEclipse')
}

/**
 * Determine artifact replacement from bnd-platform information.
 */
def findBndPlatformArtifactMapping(java.util.jar.Manifest manifest) {
	 def group, name, version

	 if (manifest?.attr?.getValue('BndPlatform-MergedArtifacts')) {
		// use first artifact of merged artifacts
		group = manifest?.attr?.getValue('BndPlatform-MergedArtifact-1-Group')
		name = manifest?.attr?.getValue('BndPlatform-MergedArtifact-1-Name')
		version = manifest?.attr?.getValue('BndPlatform-MergedArtifact-1-Version')
	}
	else {
		// use single original artifacts
		group = manifest?.attr?.getValue('BndPlatform-ArtifactGroup')
		name = manifest?.attr?.getValue('BndPlatform-ArtifactName')
		version = manifest?.attr?.getValue('BndPlatform-ArtifactVersion')
	}

	if (name && group && version) {
		[name: name, group: group, version: version]
	}
	else {
		null
	}
}

/**
 * Determine additional parts for a bundle originally merged with bnd-platform from
 * multiple Maven artifacts.
 */
def findOtherMergedParts(java.util.jar.Manifest manifest) {
	def result = []

	def artifacts = manifest?.attr?.getValue('BndPlatform-MergedArtifacts')
	if (artifacts) {
		def number = artifacts as int
		for (int i = 1; i < number; i++) {
			// iterate over all save the first
		  
			int index = i+1
		  
			def group = manifest?.attr?.getValue("BndPlatform-MergedArtifact-${index}-Group")
			def name = manifest?.attr?.getValue("BndPlatform-MergedArtifact-${index}-Name")
			def version = manifest?.attr?.getValue("BndPlatform-MergedArtifact-${index}-Version")
		  
			if (name && group && version) {
				  result << [name: name, group: group, version: version]
			}
		}
	}

	result
}

/**
 * Add additional dependencies defined in the manifest.
 */
void addMoreDependencies(def pom, java.util.jar.Manifest manifest) {
	def deps = manifest?.attr?.getValue('Unpuzzle-AddDependencies')
	if (deps) {
		deps.split(',').each { depStr ->
			def parts = depStr.split(';')
			
			if (parts.length >= 3) {
				def group = parts[0]
				def name = parts[1]
				def version = parts[2]
				
				println "Adding additional dependency $group:$name:$version"
				
				// add custom dependency
				pom.dependencyBundles << new org.akhikhl.unpuzzle.osgi2maven.DependencyBundle(
					// add prefix to be able to identify the dependeny for configuration
					group: '___more___' + group,
					name: name,
					version: version,
					// not sure what this is for
					// visibility: 'private',
					resolution: 'mandatory')
			}
		}
	}
}

/**
 * Find the artifact version to use from a version mapping part of
 * the bundle artifact map.
 */
def findArtifactVersion(String version, Object versions) {
	// is there a direct mapping?
	String result = versions[version]
	  
	String stripped = stripBndQualifier(version)
	if (!result) {
		// is there a mapping with the bnd qualifier excluded?
		result = versions.findResult { bundleVersion, pomVersion ->
			String bundleStripped = stripBndQualifier(bundleVersion)
			if (stripped == bundleStripped) {
				pomVersion
			}
			else {
				null
			}
		}
	}

	if (!result) {
		// fall-back to the stripped version
		result = stripped
	}

	result
}

String stripBndQualifier(String version) {
	def v = new org.osgi.framework.Version(version)
	def qualifier = v.qualifier

	['i20', 'bnd-', 'v20'].any { prefix ->
		if (qualifier.startsWith(prefix)) {
			qualifier = null
			return true
		}
		
		def inset = '-' + prefix
		def pos = qualifier.indexOf(inset)
		if (pos > 0) {
			qualifier = qualifier.substring(0, pos)
			return true
		}
		
		return false
	}

	def v2 = new org.osgi.framework.Version(v.major, v.minor, v.micro, qualifier)
	v2.toString()
}

String stripQualifier(String version) {
	def v = new org.osgi.framework.Version(version)
	def noQualifier = new org.osgi.framework.Version(v.major, v.minor, v.micro)
	noQualifier.toString()
}

String findMajorVersion(String version) {
	try {
		def v = new org.osgi.framework.Version(version)
		v.major as String
	} catch (e) {
		// invalid version encountered
		null
	}
}

/**
 * Adapt version numbers of HALE bundles for publishing to Maven.
 */
String adaptHaleBundleVersion(String version) {
	def v
	try {
		v = new org.osgi.framework.Version(version)
	} catch (e) {
		// invalid version encountered
		return version
	}
	def qualifier = v.qualifier

	if (qualifier == 'SNAPSHOT') {
		// SNAPSHOT version
		"${v.major}.${v.minor}.${v.micro}-SNAPSHOT"
	}
	else if (qualifier == 'release') {
		// release version -> omit qualifier
		"${v.major}.${v.minor}.${v.micro}"
	}
	else {
		// leave version as-is
		version
	}
}
  
/**
 * Repositories for verifying third party artifacts
 */
repositories {
	maven { // wetransform artifactory
		url 'https://artifactory.wetransform.to/artifactory/libs-release/'
	}
	maven { // wetransform artifactory (snapshots)
		url 'https://artifactory.wetransform.to/artifactory/libs-snapshot/'
	}
	jcenter()
	maven {
		url 'http://download.osgeo.org/webdav/geotools/'
	}
}

unpuzzle {
	
	// deploy to default repository if installing locally 
	localMavenRepositoryDir = new File(new File(System.getProperty('user.home'), '.m2'), 'repository')

	unpuzzleDir = file('build/unpuzzle')

	selectedEclipseVersion = 'hale'
	  
	eclipseVersion('hale') {
		eclipseMavenGroup = 'eu.esdihumboldt.unpuzzled' // default group
		
		sources {
			def targetDir = new File(project.buildDir, 'gen.site/target')
			def siteFile = new File(targetDir, "eu.esdihumboldt.hale.all.feature.site-${project.version}.zip")
			source siteFile.toURI().toString()

			//TODO add delta pack?
		}
	}

	artifacts {
		
		//--- duplicates ---
		
		bundle('javax.inject') {
			// instead use javax.inject.javax.inject
			replaceWith 'javax.inject.javax.inject'
		}
		
		bundle('org.slf4j.api') {
			// instead use slf4j.api
			replaceWith 'slf4j.api'
		}

		// turn on verifying all artifacts that are not deployed
		// (they should be resolvable through the configured repositories)
		verifyIfNoDeploy = true
		
		// artifact configuration applied to all artifacts
		all {
			// put HALE bundles in a separate group
			if (name.startsWith('eu.esdihumboldt')) {
				group = 'eu.esdihumboldt.hale'
			}
		  
			// replace some bundles with already available Maven artifacts
			def mapping
		  
			// determine Maven Artifact based on bnd-platform information in bundle
			mapping = findBndPlatformArtifactMapping(pom.manifest)
		  
			// use bundleArtifactMap as fall-back
			if (!mapping) {
				def bundleArtifactMap = new groovy.json.JsonSlurper().parse(file('bundleArtifactMap.json'))
				mapping = bundleArtifactMap[name]
			}
		  
			if (mapping) {
				// check if there is a variant of the mapping to be applied
				// -> determine major version
				def majorVersion = findMajorVersion(version)
				// use mapping specific for major version, if it is defined
				if (majorVersion && mapping["mapping-v$majorVersion"]) {
					mapping = mapping["mapping-v$majorVersion"]
				}
				
				// apply artifact mapping
				group = mapping.group
				name = mapping.name
				if (mapping.version) {
					version = mapping.version
				}
				else {
					def newVersion = findArtifactVersion(version, mapping.versions)
					version = newVersion
				}
				deploy = false
			
				// add "other parts" if bundle was merged with bnd-platform
				otherParts.addAll(findOtherMergedParts(pom.manifest));
			}
			else if (group.startsWith('___more___')) {
				// custom dependency defined via manifest
				
				// remove prefix
				group = group.substring('___more___'.length())
				
				// do not deploy dependency (this should always be an existing Maven dependency)
				deploy = false
			}
			else {
				// Eclipse-provided or HALE-built bundle
			
				// for HALE-built bundles, adapt version number as SNAPSHOT/release
				version = adaptHaleBundleVersion(version)
			}
			
			// add custom dependencies defined in manifest
			addMoreDependencies(pom, pom.manifest)
		}
	}

	uploadEclipse = [
		url: 'https://artifactory.wetransform.to/artifactory/libs-release-local',
		snapshotUrl: 'https://artifactory.wetransform.to/artifactory/libs-snapshot-local',
		user: project.hasProperty('wetfArtifactoryUser') ? project.getProperty('wetfArtifactoryUser') : System.getenv('WETF_ARTIFACTORY_USER'),
		password: project.hasProperty('wetfArtifactoryPassword') ? project.getProperty('wetfArtifactoryPassword') : System.getenv('WETF_ARTIFACTORY_PASSWORD')
	]
}
